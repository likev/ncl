
/*
 *      $Id$
 */
/************************************************************************
*									*
*			     Copyright (C)  1995			*
*	     University Corporation for Atmospheric Research		*
*			     All Rights Reserved			*
*									*
************************************************************************/
/*
 *	File:		
 *
 *	Author:		Ethan Alpert
 *			National Center for Atmospheric Research
 *			PO 3000, Boulder, Colorado
 *
 *	Date:		Fri Jan 27 18:26:35 MST 1995
 *
 *	Description:	
 */
#include "NclTypelogical.h"
#include "NclTypefloat.h"

static NhlErrorTypes Ncl_Type_logical_print
#if     NhlNeedProto
(FILE *fp, void * val)
#else
(fp,val)
FILE *fp;
void *val;
#endif
{
        logical *lp = (logical*)val;
	int ret;

	if(*lp == -1) {
		ret =nclfprintf(fp,"Missing");
	} else if(*lp == 0) {
		ret =nclfprintf(fp,"False");
	} else {
        	ret =nclfprintf(fp,"True");
	}
	if(ret < 0) {
                return(NhlWARNING);
        } else {
                return(NhlNOERROR);
        }
}









static NhlErrorTypes Ncl_Type_logical_coerce
#if	NhlNeedProto
(void * result, void* from, ng_size_t n, NclScalar* from_m, NclScalar *to_m,NclTypeClass fc)
#else
(result, from, n, from_m, to_m, fc)
void * result;
void* from;
ng_size_t n;
NclScalar* from_m;
NclScalar *to_m;
NclTypeClass fc;
#endif
{
	ng_size_t i;
	logical *res = (logical*)result;
	logical tmp;
	NclTypeOp eq;
	NclScalar tmp_mis;
	

        if((fc == NULL)||(fc->type_class.eq == NULL)
                ||(result == NULL)
                ||(from==NULL))
                return(NhlFATAL);
        else
                eq = fc->type_class.eq;

        if(to_m == NULL){  
		tmp_mis.logicalval = ((NclTypeClass)nclTypelogicalClass)->type_class.default_mis.logicalval;
        } else {
		tmp_mis = *to_m;
	}


	switch(fc->type_class.type) {
	case Ncl_Typedouble: {
		double *fl = (double*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		}
		else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typefloat: {
		float *fl = (float*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typelogical: {
		logical *fl = (logical *)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = *fl;
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typelong: {
		long *fl = (long *)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeint: {
		int *fl = (int*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeshort: {
		short *fl = (short*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typebyte: {
		byte *fl = (byte*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeulong: {
		unsigned long *fl = (unsigned long *)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeuint: {
		unsigned int *fl = (unsigned int*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeint64: {
		long long *fl = (long long*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeuint64: {
		unsigned long long *fl = (unsigned long long*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeubyte: {
		unsigned char *fl = (unsigned char*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typeushort: {
		unsigned short *fl = (unsigned short*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	case Ncl_Typechar: {
		char *fl = (char*)from;
		if((from_m == NULL)&&(to_m == NULL)) {
			for(i = 0; i < n;i++,res++,fl++)  {
				*res = (logical)(*fl?1:0);
			}
		} else {
			for(i = 0; i < n;i++,res++,fl++)  {
				tmp = 0;
				(*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
				if(tmp) {
					*res = tmp_mis.logicalval;
				} else {
					*res = (logical)(*fl?1:0);
				}
			}
		}
		return(NhlNOERROR);
	}
	default:
		return(NhlFATAL);
	}
}
