
/*
 *      $Id$
 */
/************************************************************************
*									*
*			     Copyright (C)  1995			*
*	     University Corporation for Atmospheric Research		*
*			     All Rights Reserved			*
*									*
************************************************************************/
/*
 *	File:		
 *
 *	Author:		Ethan Alpert
 *			National Center for Atmospheric Research
 *			PO 3000, Boulder, Colorado
 *
 *	Date:		Fri Jan 27 18:25:46 MST 1995
 *
 *	Description:	
 */
#include "NclTypelogical.h"
#include "NclTypefloat.h"

static NhlErrorTypes Ncl_Type_byte_print
#if     NhlNeedProto
(FILE *fp, void * val)
#else
(fp,val)
FILE *fp;
void *val;
#endif
{
        byte sp = *(byte *)val;
	int ret;

        ret = nclfprintf(fp,"%d",sp);
	if(ret < 0) {
		return(NhlWARNING);
	} else {
		return(NhlNOERROR);
	}
}
static NhlErrorTypes Ncl_Type_byte_coerce
#if     NhlNeedProto
(void * result, void* from, ng_size_t n, NclScalar* from_m, NclScalar *to_m,NclTypeClass fc)
#else
(result, from, n, from_m, to_m, fc)
void * result;
void* from;
ng_size_t n;
NclScalar* from_m;
NclScalar *to_m;
NclTypeClass fc;
#endif
{
        ng_size_t i;
        byte *res = (byte*)result;
        logical tmp;
        NclTypeOp eq;
        NclScalar tmp_mis;

        if((fc == NULL)||(fc->type_class.eq == NULL)
                ||(result == NULL)
                ||(from==NULL))
                return(NhlFATAL);
        else
                eq = fc->type_class.eq;

        if(to_m == NULL){
                tmp_mis.byteval = ((NclTypeClass)nclTypebyteClass)->type_class.default_mis.byteval;
        } else {
                tmp_mis.byteval = to_m->byteval;
        }

        switch(fc->type_class.type) {
        case Ncl_Typebyte: {
                byte *fl = (byte*)from;
                if((from_m == NULL)||(to_m==NULL)) {
                        for(i = 0; i < n;i++,res++,fl++)  {
                                *res = *fl;
                        }
                } else {
                        for(i = 0; i < n;i++,res++,fl++)  {
                                tmp = 0;
                                (*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
                                if(tmp) {
                                        *res = tmp_mis.byteval;
                                } else {
                                        *res = *fl;
                                }
                        }
                }
                return(NhlNOERROR);
        }	
        case Ncl_Typeubyte: {
                unsigned char *fl = (unsigned char *)from;
                if((from_m == NULL)||(to_m == NULL)) {
                        for(i = 0; i < n;i++,res++,fl++)  {
                                *res = (byte)*fl;
                        }
                } else {
                        for(i = 0; i < n;i++,res++,fl++)  {
                                tmp = 0;
                                (*eq)((void*)&tmp,(void*)fl,(void*)from_m,NULL,NULL,1,1);
                                if(tmp) {
                                        *res = tmp_mis.byteval;
                                } else {
                                        *res = (byte)*fl;
                                }
                        }
                }
                return(NhlNOERROR);
        }
	default:
		return(NhlFATAL);
	}
}

static NhlErrorTypes Ncl_Type_byte_cmpf
#if	NhlNeedProto
(void *lhs, void* rhs, NclScalar* lhs_m, NclScalar *rhs_m,int digits, double * result)
#else
(lhs, rhs, lhs_m, rhs_m, digits, result)
void *lhs;
void* rhs;
NclScalar* lhs_m;
NclScalar *rhs_m;
int digits;
double * result;
#endif
{
	
	if((lhs_m != NULL)&&(lhs_m->byteval == *(byte*)lhs)) {
		return(NhlFATAL);
	} else if((rhs_m != NULL)&&(rhs_m->byteval == *(byte*)rhs)) {
		return(NhlFATAL);
	} else {
		*result = (double)(*(byte*)lhs-*(byte*)rhs);
		return(NhlNOERROR);
	}
	
}


