
/*
 *      $Id: NclTypeobj.c.specific,v 1.11 2008-12-10 20:12:17 dbrown Exp $
 */
/************************************************************************
*									*
*			     Copyright (C)  1995			*
*	     University Corporation for Atmospheric Research		*
*			     All Rights Reserved			*
*									*
************************************************************************/
/*
 *	File:		
 *
 *	Author:		Ethan Alpert
 *			National Center for Atmospheric Research
 *			PO 3000, Boulder, Colorado
 *
 *	Date:		Fri Jan 27 18:34:41 MST 1995
 *
 *	Description:	
 */
#ifdef NIO_LIB_ONLY
#include "nioBaseP.h"
#include "nioCallbacks.h"
#include "nioConvertP.h"
#else
#include <ncarg/hlu/BaseP.h>
#include <ncarg/hlu/Callbacks.h>
#include <ncarg/hlu/ConvertP.h>
#endif
#include "NclTypelogical.h"
#include "NclHLUObj.h"
#include "NclMultiDValHLUObjData.h"

static NhlErrorTypes Ncl_Type_obj_print
#if     NhlNeedProto
(FILE *fp, void * val)
#else
(fp,val)
FILE *fp;
void *val;
#endif
{

	NclObj object;
	int ret;


	object = _NclGetObj(*(obj*)val);

	if(object == NULL) {
		ret = nclfprintf(fp,"%d",*(obj*)val);
		if(ret < 0) {
                	return(NhlWARNING);
        	} else {
                	return(NhlNOERROR);
        	}
	} else {
		return(_NclPrint(object,fp));
	}
}


/*ARGSUSED*/
static NhlErrorTypes CvtNhlTObjIdGenArrayToNclData
#if	NhlNeedProto
(NrmValue *from, NrmValue *to, NhlConvertArgList args, int nargs)
#else
(from, to, args, nargs)
NrmValue *from;
NrmValue *to;
NhlConvertArgList args;
int nargs;
#endif
{
	NhlGenArray gen;
	char func[] = "CvtNhlTObjIdGenArrayToNclData";
	void *val;
	NclMultiDValData tmp_md;
	ng_size_t i;
	int id;
	NclHLUObj tmp_hlu;
	NhlLayer tmp_layer;
	ng_size_t len_dimensions = 1;
	

	if(nargs != 0) {
		NhlPError(NhlFATAL,NhlEUNKNOWN,"%s: called with wrong number of args",func);
		to->size =0;
		return(NhlFATAL);
	}
	gen = (NhlGenArray)from->data.ptrval;
	if(gen != NULL) {
		if(!_NhlIsSubtypeQ(NrmStringToQuark(NhlTIntegerGenArray),from->typeQ)) {
			NhlPError(NhlFATAL,NhlEUNKNOWN,"%s: called with wrong input type",func);
			to->size =0;
			return(NhlFATAL);
		}
		val = NclMalloc((unsigned)sizeof(int) * gen->num_elements);
		for(i = 0; i < gen->num_elements; i++ ){
			id = ((int*)gen->data)[i];
			if(id >0 ) {
				tmp_layer = _NhlGetLayer(id);
				tmp_hlu = _NclHLUObjCreate(NULL,NULL,Ncl_HLUObj,0,STATIC,id,-1,tmp_layer->base.layer_class);
				if(tmp_hlu != NULL) {
					((int*)val)[i] = tmp_hlu->obj.id;
				} else {
					((int*)val)[i] = ((NclTypeClass)nclTypeobjClass)->type_class.default_mis.objval;
				}
			} else {
				((int*)val)[i] = ((NclTypeClass)nclTypeobjClass)->type_class.default_mis.objval;
			}
		}
		tmp_md = _NclMultiDValHLUObjDataCreate(
			NULL,NULL, Ncl_MultiDValHLUObjData,
			0,val,NULL,gen->num_dimensions,
			gen->len_dimensions,TEMPORARY,NULL);
		if(to->size < sizeof(NclMultiDValData)) {
			return(NhlFATAL);
		} else {
			*((NclMultiDValData*)(to->data.ptrval)) = (void*)tmp_md;
			return(NhlNOERROR);
		}
	} else {
		val = NclMalloc((unsigned)sizeof(int) );
		*(obj*)(val) = nclTypeobjClassRec.type_class.default_mis.objval;
		tmp_md = _NclMultiDValHLUObjDataCreate(
			NULL,NULL, Ncl_MultiDValHLUObjData,
			0,val,&nclTypeobjClassRec.type_class.default_mis,1,
			&len_dimensions,TEMPORARY,NULL);
		if(to->size < sizeof(NclMultiDValData)) {
			return(NhlFATAL);
		} else {
			*((NclMultiDValData*)(to->data.ptrval)) = (void*)tmp_md;
			return(NhlNOERROR);
		}
	}
}
/*ARGSUSED*/
static NhlErrorTypes CvtNhlTObjIdToNclData
#if	NhlNeedProto
(NrmValue *from, NrmValue *to, NhlConvertArgList args, int nargs)
#else
(from, to, args, nargs)
NrmValue *from;
NrmValue *to;
NhlConvertArgList args;
int nargs;
#endif
{
	void* tmp;
	NclMultiDValData tmp_md;
	int n_dims = 1;
	ng_size_t len_dims = 1;
	NhlLayer tmp_layer;
	NclHLUObj tmp_hlu;
	NclScalar missing;

	tmp = NclMalloc((unsigned)sizeof(int));
	tmp_layer = _NhlGetLayer(*(int*)&(from->data));
	missing = ((NclTypeClass)nclTypeobjClass)->type_class.default_mis;
	if(tmp_layer != NULL) {
		tmp_hlu = _NclHLUObjCreate(NULL,NULL,Ncl_HLUObj,0,STATIC,*(int*)&(from->data),-1,tmp_layer->base.layer_class);
		*(int*)tmp = tmp_hlu->obj.id;
	} else {
		*(int*)tmp = ((NclTypeClass)nclTypeobjClass)->type_class.default_mis.objval; 
	}
	
	
	tmp_md = _NclMultiDValHLUObjDataCreate(
		NULL,NULL, Ncl_MultiDValHLUObjData,
		0,(void*)tmp,&missing,n_dims,
		&len_dims,TEMPORARY,NULL);
	if(to->size < sizeof(NclMultiDValData)) {
		return(NhlFATAL);
	} else {
		*((NclMultiDValData*)(to->data.ptrval)) = (void*)tmp_md;
        	return(NhlNOERROR);
	}
}

static NhlErrorTypes Ncl_Type_obj_InitClass
#if	NhlNeedProto
(void)
#else
()
#endif
{
        NhlRegisterConverter(NhlbaseClass,NhlTObjIdGenArray,NhlTNclData,
		CvtNhlTObjIdGenArrayToNclData,NULL,0,False,NULL);
        NhlRegisterConverter(NhlbaseClass,NhlTObjId,NhlTNclData,
		CvtNhlTObjIdToNclData,NULL,0,False,NULL);
	nclTypeobjClassRec.type_class.default_mis.objval = -1;
	return(NhlNOERROR);
}

